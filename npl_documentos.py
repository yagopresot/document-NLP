# -*- coding: utf-8 -*-
"""NPL Documentos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RIP9gqfeSakF9Lo1Xi_j9FXmUjhxy1k5
"""

from google.colab import drive
drive.mount('/content/drive')

import zipfile

with zipfile.ZipFile('/content/drive/MyDrive/Projetos/dados/texts.zip', 'r') as zip:
  print(zip.namelist())

with zipfile.ZipFile('/content/drive/MyDrive/Projetos/dados/texts.zip', 'r') as zip:
  print(*zip.namelist(), sep = '\n')

with zipfile.ZipFile('/content/drive/MyDrive/Projetos/dados/texts.zip', 'r') as zip:
  with zip.open('ADI2TJDFT.txt') as arquivo:
    texto = arquivo.read().decode('utf-8')

print(texto)

!pip install -U spacy

!python -m spacy download pt_core_news_sm

import spacy
import pt_core_news_sm

modelo_ner = pt_core_news_sm.load()

doc = modelo_ner(texto)

for entidade in doc.ents:
  print(f'{entidade.text} -> {entidade.label_}')

import pandas as pd

entidades = []
labels = []

for entidade in doc.ents:
  entidades.append(entidade.text)
  labels.append(entidade.label_)

pd.DataFrame({'Entidade': entidades, 'Label': labels})

modelo_ner.get_pipe('ner').labels

print('LOC', spacy.explain('LOC'))
print('PER', spacy.explain('PER'))
print('ORG', spacy.explain('ORG'))
print('MISC', spacy.explain('MISC'))

spacy.displacy.render(doc, style = 'ent', jupyter=True)

!python -m spacy download en_core_web_sm

import en_core_web_sm

modelo_ner = en_core_web_sm.load()
modelo_ner.get_pipe('ner').labels

dados = []

with zipfile.ZipFile('/content/drive/MyDrive/Projetos/dados/texts.zip', 'r') as zip:
  for nome_arquivo in zip.namelist():
    with zip.open(nome_arquivo) as arquivo:
      conteudo = arquivo.read().decode('utf-8')
      palavras = conteudo.split()
      for palavra in palavras:
        dados.append([nome_arquivo,palavra])

tabela_palavras = pd.DataFrame(dados, columns = ['Arquivo', 'Palavra'])

tabela_palavras

tabela_palavras.to_csv('tabela_palavras.csv', index = False, sep = '\t')

tabela_palavras = pd.read_csv('/content/drive/MyDrive/Projetos/dados/palavras_IOB.tsv', sep = '\t')

tabela_palavras

tabela_palavras['label'].unique()

tupla = ('texto', {'entities': [(10, 17, 'ORGANIZACAO'), (25,40, 'PESSOA')]})

grupos_arquivos = tabela_palavras.groupby(by='arquivo')

grupos_arquivos.get_group('ADI2TJDFT.txt')

tabela_agrupada = grupos_arquivos.get_group('ADI2TJDFT.txt')[['palavra','label']].values
conteudo = ''
anotacoes = {'entities': []}
inicio_palavra = 0
fim_palavra = 0
for texto, label in tabela_agrupada:
    texto = str(texto)
    tamanho_texto = len(texto)+1

    inicio_palavra = fim_palavra
    fim_palavra = inicio_palavra + tamanho_texto

    if label != 'O':
        anotacao = (inicio_palavra, fim_palavra-1, label)
        anotacoes['entities'].append(anotacao)

    conteudo = conteudo + texto + ' '

conteudo

anotacoes

conteudo.find('Conselho Especial')

conteudo.find('Conselho Especial') + len('Conselho Especial')

arquivos = grupos_arquivos.groups.keys()

arquivos

documentos = []
for arquivo in arquivos:
    documento = []
    tabela_agrupada = grupos_arquivos.get_group(arquivo)[['palavra','label']].values
    conteudo = ''
    anotacoes = {'entities': []}
    inicio_palavra = 0
    fim_palavra = 0
    for texto, label in tabela_agrupada:
        texto = str(texto)
        tamanho_texto = len(texto)+1

        inicio_palavra = fim_palavra
        fim_palavra = inicio_palavra + tamanho_texto

        if label != 'O':
            anotacao = (inicio_palavra, fim_palavra-1, label)
            anotacoes['entities'].append(anotacao)

        conteudo = conteudo + texto + ' '

        documento = (conteudo, anotacoes)
        documentos.append(documento)

documentos

import random

random.shuffle(documentos)

documentos

len(documentos)

dados_treino = documentos[:40]
dados_validacao = documentos[40:]

dados_treino

from tqdm import tqdm
from spacy.training import Example

def treinar_modelo_ner(dados_treino, dados_validacao, epocas):

    modelo = spacy.load('pt_core_news_sm')

    if 'ner' not in modelo.pipe_names:
        ner = modelo.create_pipe('ner')
        modelo.add_pipe(ner, last = True)
    else:
        ner = modelo.get_pipe('ner')

    for _, anotacoes in dados_treino:
        for ent in anotacoes.get('entities'):
            ner.add_label(ent[2])

    outros_pipelines = [pipeline for pipeline in modelo.pipe_names if pipeline != 'ner']

    with modelo.disable_pipes(*outros_pipelines):
        spacy.util.fix_random_seed()
        otimizador = modelo.create_optimizer()

        for epoca in tqdm(range(epocas), desc = 'Treinando o modelo'):

            random.seed(10)
            random.shuffle(dados_treino)
            losses = {'ner': 0.0}

            for textos, anotacoes in dados_treino:
                exemplo = Example.from_dict(modelo.make_doc(textos), anotacoes)

                modelo.update([exemplo], drop = 0.2, sgd = otimizador, losses = losses)

            print(f'\nÉpoca {epoca+1} - Loss médio de treino: {losses["ner"]/len(dados_treino)}')

            val_losses = {'ner': 0.0}
            exemplos = []

            for textos, anotacoes in dados_validacao:
                exemplo = Example.from_dict(modelo.make_doc(textos), anotacoes)
                exemplos.append(exemplo)

            for exemplo in exemplos:

                modelo.update([exemplo], sgd = None, drop = 0, losses = val_losses)

            print(f'\nÉpoca {epoca+1} - Loss médio de validação: {val_losses["ner"]/len(dados_validacao)}')

    return modelo

modelo_ner = treinar_modelo_ner(dados_treino, dados_validacao, epocas = 2)

!unzip /content/drive/MyDrive/Projetos/dados/modelo.zip

modelo_ner = spacy.load('/content/drive/MyDrive/Projetos/dados/modelo.zip')

doc = modelo_ner('João nasceu no dia 10/04/2010 em Florianópolis')

for entidade in doc.ents:
    print(f'{entidade.text} -> {entidade.label_}')

spacy.displacy.render(doc, style = 'ent', jupyter = True)

with open('/content/drive/MyDrive/Projetos/dados/20150110436469APC.txt', encoding = 'utf-8') as arquivo:
    texto = arquivo.read()

print(texto)

doc = modelo_ner(texto)

spacy.displacy.render(doc, style = 'ent', jupyter = True)

rotulos = list(modelo_ner.get_pipe('ner').labels)
rotulos

cores = {
'B-JURISPRUDENCIA': '#F0F8FF',
 'B-LEGISLACAO': '#FA8072',
 'B-LOCAL': '#98FB98',
 'B-ORGANIZACAO': '#DDA0DD',
 'B-PESSOA': '#F0E68C',
 'B-TEMPO': '#FFB6C1',
 'I-JURISPRUDENCIA': '#F0F8FF',
 'I-LEGISLACAO': '#FA8072',
 'I-LOCAL': '#98FB98',
 'I-ORGANIZACAO': '#DDA0DD',
 'I-PESSOA': '#F0E68C',
 'I-TEMPO': '#FFB6C1',
 'LOC': '#D3D3D3',
 'MISC': '#D3D3D3',
 'ORG': '#D3D3D3',
 'PER': '#D3D3D3'
}
opcoes = {'ents': rotulos, 'colors': cores}
spacy.displacy.render(doc, style = 'ent', jupyter = True, options = opcoes)